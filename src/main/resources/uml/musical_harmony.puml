@startuml

class Harmony {
    List<NoteName> components
    HarmonyRelation harmonyRelation
    NoteName baseNoteName
    + boolean fit(Pitch)
}

interface HarmonyRelation {
    + PitchInterval[] getIntervals()
}

enum NoteName {
    C
    C_SHARP
    D
    ...
    + int value()
}

Harmony o-- HarmonyRelation
Harmony o-- NoteName

enum ScaleType {
    MAJOR_SCALE
    MINOR_SCALE
    MINOR_PENTATONIC_SCALE
    PitchInterval[] intervals
}

enum ChordType {
    MAJOR
    MINOR
    PitchInterval[] intervals
}

HarmonyRelation <--- ScaleType
HarmonyRelation <--- ChordType

class Chord {
    Harmony chordHarmony
    double startTime
    double endTime
    double durationTime
    + fitHarmony(Pitch)
    + finishedEarlierThan(double)
}

Chord o-- Harmony

enum ChordText {
    C
    Cis
    D
    ...
    ChordType chordType
    NoteName baseNoteName
    + Harmony getChordHarmony()
}

class ChordProgressionBuilder {
    List<Chord> chordList
    + void appendChord(Harmony, double)
}

ChordProgressionBuilder o-- Chord

class ChordProgressionParser {
    + List<Chord> parseProgressionText(String, int)
}

ChordProgressionParser <--- ChordText
ChordProgressionParser <--- ChordProgressionBuilder

@enduml